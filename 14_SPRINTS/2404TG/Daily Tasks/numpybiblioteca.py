# -*- coding: utf-8 -*-
"""numpyBiblioteca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D9UPeRZjtoZhOBKUeFTBrbfuEhuDecuQ
"""

#Aula de NumPy
#Framework Utilizado para Data Sciencie
#DOcumentção e como instalar: https://numpy.org/

import numpy as np

#Matriz (Array) unidimensional
#A matriz tem um crescimento em x e y, enquanto a lista tem crescimento apenas em x
#Para saber qual o tipo da variavel
#Nesse caso isso é uma matriz unidimensional
mt = np.array([12, 34, 26, 18, 10])
print(mt)
print(type(mt))

#Criando um tipo especifico
#O numero 64 e 32 é referente aos bits, é encessario que o float seja o dobro do int já que numeros floats são maiores que numeros ints
mtfloat = np.array([1.3,2,3], dtype = np.float64)
print(mtfloat)
mtint = np.array([1, 2, 3], dtype = np.int32)
print(mtint)

#Mudar o tipo da Array
mtnew = np.array([1.4, 3.6, -5.1, 9.42, 4.99999])
print(mtnew)
mtnewint = mtnew.astype(np.int32)
print(mtnewint)

print('-'*50)

mt5 = np.array([2, 6, 4, 1, 10])
print(mt5)
mt5float = mt5.astype(np.float64)
print(mt5float)

#Criar Matriz Bidimensional
mt7 = np.array([[12, 34, 26],[10, 20, 30],[1, 2, 3]])
print(mt7)

#Vazio tipificado
#Os numeros 3 e 2 são referente a colunas e linhas
#O empty serve para criar dados aleatorios, pois nesse caso a matriz está vazia
vazio = np.empty([3,2], dtype = int)
print(vazio)

print('-'*47)

#Outra forma de fazer o vazio tipificado
zeros = np.zeros([4,3])
print(zeros)

#Matriz quadrada
diagonal = np.eye(9)
print(diagonal)
np.append

#Mariz com numeros aleatorios
aleatorio = np.random.random(5)
print(aleatorio)

#Remover repetições
j = np.array([12,12,13,14,11,12,16,20,21])
print(j)
j = np.unique(j)
print(j)

#Como Localizar um elemento na matriz
k = np.array([[17, 22, 43], [27,25,14], [15, 21, 32]])
print(k[1][1])

#Para fazer soma entre outros
print(k.sum()) #Soma dos elementos da matriz
print(k.mean()) #MEdia dos elementos da matriz
print(k.std()) #Desvio padrão da matriz
print(k.max()) #Mairo numero da matriz
print(k.min()) #Menor numero da matriz
print(np.sqrt(k)) #Raiz quadrada da matriz
print(np.exp(k)) #Exponencial da matriz

#Extração de linhas e colunas
l = np.array([[4, 5, 6], [6, 1, 7], [7, 4, 8]])
print(l)
print(l[1][1])

#Primeira linha e todas as colunas
l_linha_1 = l[0,:]
print(l_linha_1)
l_linha_2 = l[1,:]
print(l_linha_2)

#TOdas as linhas da primeira coluna
l_coluna_1 = l[:, 0]
print(l_coluna_1)
l_coluna_2 = l[:, 1]
print(l_coluna_2)

#operações
n = np.array([[1, 2], [3, 4]])
o = np.array([[1, 1], [1, 1]])
res1 = n + o
print(res1)

p = np.array([[1, 2], [3, 4], [5, 6]])
q = np.array([[2, 1]])

print(q+p)

#transposição, rearranjo de um conjunto
#de 15 elementos de 0 a 14

f = np.arange(15).reshape((3, 5))
print(f)

#matriz transposta

s = f.transpose((0,1))
print(s)

#matriz randomizada
v = np.random.randn(4,4)
print(v)

x = (v>1)
print(x)

#Criando a matriz com valores
#-1 e 1 baseados nos valores do array
z = np.where(x>0, 5, 90)
print(z)