# -*- coding: utf-8 -*-
"""ExerciseKart.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LYyCzmjThqrm0S5xXdlEfpzC5QlD-tc7
"""

#Uma pista de Kart permite 10 voltas para cada um de 6 corredores. Faça um programa que leia os nomes e os tempos (em segundos) de cada volta de cada corredor. Ao final, o programa deve informar: De quem foi a melhor volta da prova e em que volta. Classificação final em ordem crescente. E por fim, qual foi a volta com a média mais rápida.

import numpy as np

#Corredores participantes desta prova:
nomescorredores = ["Optimus", "Soundwave", "Grimlock", "Shockwave", "Ironhide", "Megatron"]

#Tempos de cada corredor:
Megatron = np.array([75, 72, 73, 71, 78, 76, 74, 77, 79, 80])
Ironhide = np.array([74, 72, 71, 76, 73, 75, 77, 70, 78, 79])
Shockwave = np.array([78, 76, 72, 71, 75, 77, 74, 79, 73, 80])
Grimlock = np.array([72, 71, 79, 80, 73, 75, 78, 77, 76, 74])
Soundwave = np.array([71, 75, 77, 79, 72, 78, 76, 74, 80, 73])
Optimus = np.array([72, 74, 76, 78, 80, 73, 71, 79, 75, 77])

#Matriz de tempos de voltas
temposvoltas=np.array([Megatron, Ironhide, Shockwave, Grimlock, Soundwave, Optimus])

#Função para encontrar a melhor volta e em qual volta:
def melhorvolta(corredores):
    melhortempo = np.min(corredores)
    corredor, volta = np.where(corredores == melhortempo)
    return corredor[0], volta[0] + 1  # Adicionamos 1 para compensar o índice base 0

#Encontrando a melhor volta da prova:
corredor, volta = melhorvolta(temposvoltas)
print(f"A melhor volta da prova foi de {nomescorredores[corredor]} na volta {volta} com {temposvoltas[corredor, volta - 1]} segundos.")

#Calculando a média de cada volta:
mediavoltas = np.mean(temposvoltas, axis=0)

#Encontrando a volta com a média mais rápida:
voltamediarapida = np.argmin(mediavoltas) + 1
print(f"A volta com a média mais rápida foi a volta {voltamediarapida} com tempo médio de {mediavoltas[voltamediarapida - 1]} segundos.")

#Função para imprimir a classificação final em ordem crescente
def classificacaofinal(corredores):
    return np.argsort(np.sum(corredores, axis=1)) # Adicionamos 1 para compensar o índice base 0

#Função para imprimir a classificação final em ordem crescente
def classificacaofinal(corredores):
    return np.argsort(np.sum(corredores, axis=1))

#Imprimindo a classificação final em ordem crescente
classificacao = classificacaofinal(temposvoltas)
print("Classificação final em ordem crescente:")
for posicao, corredor_idx in enumerate(classificacao):
    print(f"{posicao + 1}. {nomescorredores[corredor_idx]}")